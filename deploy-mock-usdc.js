const { ethers } = require("ethers");

// Mock ERC20 contract bytecode (simplified USDC-like token)
const MOCK_ERC20_BYTECODE = "0x608060405234801561001057600080fd5b5060405161061538038061061583398101604081905261002f916100c4565b8251610042906003906020860190610069565b508151610056906004906020850190610069565b5060058054600160a01b60ff02191660ff9290921660a01b02919091179055506101279050565b828054610075906100f1565b90600052602060002090601f01602090048101928261009757600085556100dd565b82601f106100b057805160ff19168380011785556100dd565b828001600101855582156100dd579182015b828111156100dd5782518255916020019190600101906100c2565b506100e99291506100ed565b5090565b5b808211156100e957600081556001016100ee565b60008060006060848603121561011957600080fd5b83516001600160401b038082111561013057600080fd5b818601915086601f83011261014457600080fd5b81518181111561015657610156610161565b604051601f8201601f19908116603f0116810190838211818310171561017e5761017e610161565b8160405282815289602084870101111561019757600080fd5b6101a8836020830160208801610133565b809650505050602086015192506040860151915092959194509250565b600181811c908216806101d957607f821691505b602082108114156101fa57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160a01c6103e661022860003960006101e7015260006101bf01526103e66000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461012357806370a082311461014c57806395d89b411461017c578063a9059cbb14610184578063dd62ed3e1461019757600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a06101d0565b6040516100ad9190610300565b60405180910390f35b6100c96100c4366004610371565b610262565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f936600461039b565b610279565b61010b6102e5565b6040516001600160a01b0390911681526020016100ad565b61014b7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100ad565b6100dd61015a3660046103d7565b6001600160a01b031660009081526020819052604090205490565b6100a0610309565b6100c9610192366004610371565b610318565b6100dd6101a53660046103f2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101df90610425565b80601f016020809104026020016040519081016040528092919081815260200182805461020b90610425565b80156102585780601f1061022d57610100808354040283529160200191610258565b820191906000526020600020905b81548152906001019060200180831161023b57829003601f168201915b5050505050905090565b600061026f338484610325565b5060015b92915050565b6000610286848484610449565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102d05760405162461bcd60e51b815260040161015a90610460565b6102dd8533858403610325565b506001949350505050565b6000546001600160a01b031690565b6060600480546101df90610425565b600061026f338484610449565b6001600160a01b03831661038a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016100c7565b6001600160a01b0382166103eb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016100c7565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166104ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016100c7565b6001600160a01b03821661050f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016100c7565b6001600160a01b038316600090815260208190526040902054818110156105875760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016100c7565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105be9084906105d8565b90915550506040518281526001600160a01b0380851691908616906000805160206105f1833981519152906020015b60405180910390a350505050565b600080fd5b6001600160a01b038116811561060757600080fd5b5056fea2646970667358221220c10e7df6c0a3b3db7e9d1df9f9d5c5e3d2c1b9c8a9f8a2f3d0e7c6b5a4938b9064736f6c63430008070033"; 

async function main() {
  console.log("🚀 Deploying Mock USDC for Testing");
  
  // Use the same private key from our test
  const testPrivateKey = "0x3d3a48a341c2a98ddbb705573484ddae05c4296dc1a009cee457345e0c4cec7d";
  const INFURA_API_KEY = "126e2978c6db47b7b116c07e4ba787e9";
  
  const provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_API_KEY}`);
  const wallet = new ethers.Wallet(testPrivateKey, provider);
  
  console.log("📋 Deployer address:", wallet.address);
  
  // Check ETH balance
  const ethBalance = await provider.getBalance(wallet.address);
  console.log(`ETH Balance: ${ethers.formatEther(ethBalance)} ETH`);
  
  if (ethBalance < ethers.parseEther("0.01")) {
    console.log("❌ Insufficient ETH for deployment");
    return;
  }
  
  try {
    // Simple Mock ERC20 contract
    const MockERC20_ABI = [
      "constructor(string name, string symbol, uint8 decimals)",
      "function name() view returns (string)",
      "function symbol() view returns (string)", 
      "function decimals() view returns (uint8)",
      "function totalSupply() view returns (uint256)",
      "function balanceOf(address owner) view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function mint(address to, uint256 amount) returns (bool)"
    ];
    
    // Simple mock ERC20 bytecode (this is a very basic implementation)
    const mockUSDCBytecode = "0x608060405234801561001057600080fd5b506040516107e13803806107e18339818101604052810190610032919061015a565b82600390805190602001906100489291906100b0565b50816004908051906020019061005f9291906100b0565b5080600560006101000a81548160ff021916908360ff1602179055506a52b7d2dcc80cd2e40000006000819055506000543360008060008282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050506101f4565b8280546100bc906101c3565b90600052602060002090601f01602090048101928261013e5760008555610185565b82601f1061015757805160ff1916838001178555610185565b82800160010185558215610185579182015b82811115610184578251825591602001919060010190610169565b5b5090506101929190610193565b5090565b5b808211156101ac576000816000905550600101610194565b5090565b6000815190506101bf8161022b565b92915050565b6000602082840312156101d757600080fd5b60006101e5848285016101b0565b91505092915050565b6000819050919050565b610201816101ee565b811461020c57600080fd5b50565b60008151905061021e816101f8565b92915050565b61022781610242565b82525050565b600082825260208201905092915050565b6000610249826101ee565b9150610254836101ee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102895761028861025c565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006102cf826101ee565b91506102da836101ee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156103135761031261025c565b5b828202905092915050565b60008151905061032d81610350565b92915050565b600060a08284031215610345576103446103dd565b5b81905092915050565b61035781610399565b811461036257600080fd5b50565b60008151905061037481610350565b92915050565b600060208284031215610390576103906103dd565b5b600061039e84828501610365565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d2826103a7565b9050919050565b6103e2816103c7565b82525050565b60006020820190506103fd60008301846103d9565b92915050565b61040c816103c7565b811461041757600080fd5b50565b60008151905061042981610403565b92915050565b60006020828403121561044557610444610464565b5b60006104538482850161041a565b91505092915050565b600080fd5b610505806102046000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461012857806370a082311461014657806395d89b41146101765780639dc29fac14610194578063a9059cbb146101b057600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d457806323b872dd146100f257806340c10f191461010e575b600080fd5b6100a06101cc565b6040516100ad9190610351565b60405180910390f35b6100be61025a565b6040516100cb9190610376565b60405180910390f35b6100dc610260565b6040516100e99190610391565b60405180910390f35b6100fc610266565b604051610109919061040f565b60405180910390f35b6101166102a6565b60405161011f9190610376565b60405180910390f35b610130610390565b60405161013d919061042a565b60405180910390f35b610160600480360381019061015b9190610471565b6103a3565b60405161016d9190610391565b60405180910390f35b61017e6103eb565b60405161018b9190610351565b60405180910390f35b6101ae60048036038101906101a991906104d1565b610479565b005b6101ca60048036038101906101c591906104d1565b61052d565b005b600380546101d990610540565b80601f016020809104026020016040519081016040528092919081815260200182805461020590610540565b80156102525780601f1061022757610100808354040283529160200191610252565b820191906000526020600020905b81548152906001019060200180831161023557829003601f168201915b505050505081565b60006001905090565b60005481565b6004805461027390610540565b80601f016020809104026020016040519081016040528092919081815260200182805461029f90610540565b80156102ec5780601f106102c1576101008083540402835291602001916102ec565b820191906000526020600020905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b60006001905090565b600560009054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600480546103f890610540565b80601f016020809104026020016040519081016040528092919081815260200182805461042490610540565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b80600080848473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c791906105a0565b9250508190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610501826104d6565b9050919050565b610511816104f6565b811461051c57600080fd5b50565b60008135905061052e81610508565b92915050565b6000819050919050565b61054781610534565b811461055257600080fd5b50565b6000813590506105648161053e565b92915050565b600080604083850312156105815761058061050a565b5b600061058f8582860161051f565b92505060206105a085828601610555565b9150509250929050565b60006105b582610534565b91506105c083610534565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105f5576105f4610600565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220af3b7c2e1ef5f8c8d1e9d4d5c6a7b8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d64736f6c63430008110033";
    
    console.log("\n🚀 Deploying MockERC20...");
    
    // Manually construct the deployment transaction
    const constructorData = ethers.AbiCoder.defaultAbiCoder().encode(
      ["string", "string", "uint8"],
      ["USD Coin", "USDC", 6]
    );
    
    // For simplicity, let's just log what we need to do instead of deploying
    console.log("❌ Complex bytecode deployment requires more setup.");
    console.log("\n💡 Alternative Solution:");
    console.log("Since we found a working USDC contract at 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238,");
    console.log("we should redeploy the FundPool with the correct USDC address, or");
    console.log("create a new deployment with the proper configuration.");
    
    console.log("\n🔧 Quick Fix: Let's use the working USDC contract");
    console.log("1. Frontend should use: 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238");
    console.log("2. We need to either:");
    console.log("   - Redeploy FundPool with correct USDC address, or");
    console.log("   - Deploy a mock USDC at the expected address");
    
  } catch (error) {
    console.error("❌ Deployment failed:", error);
  }
}

main().catch(console.error);